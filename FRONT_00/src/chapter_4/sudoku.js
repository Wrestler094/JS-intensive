// Вам нужно написать функция для решения Судоку. Функция принимает один аргумент - строку, в ней на месте пропущенных цифр стоят -.
// Функция должна вернуть строку, в которой все значения будут заполнены.

// Давайте сыграем в настоящую головоломку Судоку, обращая внимание на то, как мы приближаемся к решению поставленной задачи.
// - Какие стратегии мы принимаем и почему?
// - Как мы выбираем, с чего начать?
// - Как мы узнаем, когда действительно следует поставить число в клетку?
// - Что мы делаем, когда мы окончательно не знаем, как заполнить остальные клетки?
// Размышляя о нашей человеческой стратегии, важно понимать, что иногда стратегии, которые работают для людей, будет трудно реализовать на компьютере.
// Однако верно и обратное: стратегии компьютера могут быть не всегда удобны для людей, потому что нам придется писать слишком много текста, использовать слишком много листов бумаги или помнить много информации, которую в состоянии запомнить компьютер, но не человек.
// Обязательно напишите метод `prettyBoard`, который берет доску, записанную в строчку и возвращает отформатированный вариант, более привычный для нашего визуального восприятия. Например:

// ```
// 1 - 5 8 - 2 - - -
// - 9 - - 7 6 4 - 5
// 2 - - 4 - - 8 1 9
// - 1 9 - - 7 3 - 6
// 7 6 2 - 8 3 - 9 -
// - - - - 6 1 - 5 -
// - - 7 6 - - - 3 -
// 4 3 - - 2 - 5 - 1
// 6 - - 3 - 8 9 - -
// ```;

// Ниже представленны тестовые данные для вашей функции, они имеют 3 уровня сложности
// * Пять головоломок могут быть решены с помощью базовой логики.
// * Пять требуют немного более продвинутой логики.
// * Пять требуют от вашего решателя умения угадывать и перерешивать, если зашёл в тупик.

// ("1-58-2----9--764-52--4--819-19--73-6762-83-9-----61-5---76---3-43--2-5-16--3-89--");
// ("--5-3--819-285--6-6----4-5---74-283-34976---5--83--49-15--87--2-9----6---26-495-3");
// ("29-5----77-----4----4738-129-2--3-648---5--7-5---672--3-9--4--5----8-7---87--51-9");
// ("-8--2-----4-5--32--2-3-9-466---9---4---64-5-1134-5-7--36---4--24-723-6-----7--45-");
// ("6-873----2-----46-----6482--8---57-19--618--4-31----8-86-2---39-5----1--1--4562--");
// ("---6891--8------2915------84-3----5-2----5----9-24-8-1-847--91-5------6--6-41----");
// ("-3-5--8-45-42---1---8--9---79-8-61-3-----54---5------78-----7-2---7-46--61-3--5--");
// ("-96-4---11---6---45-481-39---795--43-3--8----4-5-23-18-1-63--59-59-7-83---359---7");
// ("----754----------8-8-19----3----1-6--------34----6817-2-4---6-39------2-53-2-----");
// ("3---------5-7-3--8----28-7-7------43-----------39-41-54--3--8--1---4----968---2--");
// ("3-26-9--55--73----------9-----94----------1-9----57-6---85----6--------3-19-82-4-");
// ("-2-5----48-5--------48-9-2------5-73-9-----6-25-9------3-6-18--------4-71----4-9-");
// ("--7--8------2---6-65--79----7----3-5-83---67-2-1----8----71--38-2---5------4--2--");
// ("----------2-65-------18--4--9----6-4-3---57-------------------73------9----------");
// ("---------------------------------------------------------------------------------");

function sudoku(sudoku) {
    let tmp = sudoku.split("");
    const field = [];
    let isFinished = 0;

    for (let i = 0; i < 9; i++) {
        field.push(tmp.splice(0, 9));
    }

    prettyBoard(field);
    solve8rows(field);
    solve8cols(field);
    solve8square(field);
    prettyBoard(field);

    return field;
}

/**
 * Функция ищет строки с 8 числами и заполняет недостающее число
 * @param {Object[]} field - поле судоку
 */
function solve8rows(field) {
    for (let i = 0; i < 9; i++) {
        // Ищем строки где 8 из 9 чисел
        if (checkRow(field, i,  "-") === 1) {
            // Заполняем недостающую цифру
            for (let j = 1; j < 10; j++) {
                if (checkRow(field, i, `${j}`) === 0) {
                    field[i][field[i].indexOf('-')] = `${j}`;
                }
            }
        }
    }
}

/**
 * Функция ищет колонки с 8 числами и заполняет недостающее число
 * @param {Object[]} field - поле судоку
 */
function solve8cols(field) {
    for (let i = 0; i < 9; i++) {
        // Ищем колонки где 8 из 9 чисел
        if (checkCol(field, i,  "-") === 1) {
            // Заполняем недостающую цифру
            for (let j = 1; j < 10; j++) {
                if (checkCol(field, i, `${j}`) === 0) {
                    for (let k = 0; k < 9; k++) {
                        if (field[k][i] === '-') {
                            field[k][i] = `${j}`;
                        }
                    }
                }
            }
        }
    }
}

/**
 * Функция ищет квадраты с 8 числами и заполняет недостающий квадрат
 * @param {Object[]} field - поле судоку
 */
function solve8square(field) {
    for (let i = 0; i < 9; i++) {
        // Ищем квадрат где 8 из 9 чисел
        if (checkSquare(field, i, '-') === 1) {
            // Заполняем недостающую цифру
            for (let j = 1; j < 10; j++) {
                if (checkSquare(field, i, `${j}`) === 0) {
                    for (let k = Math.trunc(i / 3) * 3, kx = k + 3; k < kx; k++) {
                        for (let l = (i % 3) * 3, lx = l + 3; l < lx; l++) {
                            if (field[k][l] === '-') {
                                field[k][l] = `${j}`;
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * Функция проверяет количество совпадений искомого символа в определенной строке
 * @param {Object[]} field - поле судоку
 * @param {Number} rowNumber - индекс строки для поиса
 * @param {String} symbol - искомый символ
 * @returns {number} - количество совпадений
 */
function checkRow(field, rowNumber, symbol) {
    let counter = 0;

    for (let i = 0; i < 9; i++) {
        if (field[rowNumber][i] === symbol) {
            counter++;
        }
    }

    return counter;
}

/**
 * Функция проверяет количество совпадений искомого символа в определенной колонке
 * @param {Object[]} field - поле судоку
 * @param {Number} colNumber - индекс колонки для поиска
 * @param {String} symbol - искомый символ
 * @returns {number} - количество совпадений
 */
function checkCol(field, colNumber, symbol) {
    let counter = 0;

    for (let i = 0; i < 9; i++) {
        if (field[i][colNumber] === symbol) {
            counter++;
        }
    }

    return counter;
}

/**
 * Функция проверяет количество совпадений искомого символа в определенном квадарте поля
 * @param {Object[]} field - поле судоку
 * @param {Number} squareNumber - номер квадрата судоку для поиска (0-8, слева-направа, свверху-вниз)
 * @param {String} symbol - искомый символ
 * @returns {number} - количество совпадений
 */
function checkSquare(field, squareNumber, symbol) {
    let counter = 0;

    for (let i = Math.trunc(squareNumber / 3) * 3, ix = i + 3; i < ix; i++) {
        for (let j = (squareNumber % 3) * 3, jx = j + 3; j < jx; j++) {
            if (field[i][j] === symbol) {
                counter++;
            }
        }
    }

    return counter;
}

/**
 * Печатает массив поля построчно, для удобства разработки
 * @param {Object[]} field - поле судоку
 */
function prettyBoard(field) {
    for (let i = 0; i < field.length; i++) {
        console.log(field[i]);
    }
}